#include <stdio.h>
#include <stdlib.h> // Include stdlib.h for malloc

struct node {
    int data;
    struct node *link;
};

struct node *front = NULL;
struct node *rear = NULL;

void enqueue(int);
void dequeue();
void display();

int main() {
    int choice, value;

    while (1) {
        printf("\nQueue Operations:\n");
        printf("1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the value to enqueue: ");
                scanf("%d", &value);
                enqueue(value);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting the program.\n");
                exit(0);
            default:
                printf("Invalid choice, please try again.\n");
        }
    }
    return 0;
}

void enqueue(int x) {
    struct node *newnode;
    newnode = (struct node *)malloc(sizeof(struct node));
    newnode->data = x;
    newnode->link = NULL;

    if (front == NULL) {
        
        front = rear = newnode;
    } else {
        rear->link = newnode;
        rear = newnode;
    }
}


void dequeue() {
    if (front == NULL) {
        printf("Queue is empty. Dequeue operation failed.\n");
        return;
    }

    struct node *temp = front;
    front = front->link;
    free(temp);
}

void display() {
    struct node *temp;

    if (front == NULL) {
        printf("Queue is empty.\n");
        return;
    }

    printf("Queue: ");
    temp = front;
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->link;
    }
    printf("\n");
}

